#include<GL/glew.h>
#include<iostream>
#include<GLFW/glfw3.h>
using namespace std;
typedef int (Function)(int a);
typedef unsigned int  UsInt;
static UsInt CompileShader(UsInt type ,const std::string& source) {
        UsInt id  = glCreateShader(type);
        const char* src = source.c_str();// returns a pointer to the first letter
        glShaderSource(id, 1, &src, nullptr);
        glCompileShader(id);
        return id;
}
// vertex shader takes in the data whereas fragment shader rasterizes the data into pixel on the screen 
static UsInt CreateShader(const std::string& vertexShader, const std::string& fragmentShader){
    UsInt generateProgram = glCreateProgram();// same as gen buffer
    UsInt VShader = CompileShader(GL_VERTEX_SHADER, vertexShader);
    UsInt FShader = CompileShader(GL_FRAGMENT_SHADER, fragmentShader);
    // binding the shaders 
    glAttachShader(generateProgram, VShader);
    glAttachShader(generateProgram, FShader);
    glLinkProgram(generateProgram);
    glValidateProgram(generateProgram);
    glDeleteShader(VShader);
    glDeleteShader(FShader);    
    return generateProgram;
}
float postionsForTriangle[6] = {
        -0.5f,-0.5f,
        0.0f, 0.5f,
        0.5f, -0.5f,
    };
int main(void)
{
    GLFWwindow* window;
    glfwInit();
if (!glfwInit())
        return -1;
    window = glfwCreateWindow(640, 480, "Intrduction", NULL, NULL);
    if (!window)
    {
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);

    if (glewInit() != GLEW_OK) {
        cout << "Error" << endl;
    }

    cout << glGetString(GL_VERSION); //prints the current version of opengl
    UsInt buffer;
    glGenBuffers(1, &buffer);// create a buffer and store it in the id passed

    // binding the buffer for the use 
    glBindBuffer(GL_ARRAY_BUFFER, buffer);

    // store data to the buffer
    glBufferData(GL_ARRAY_BUFFER, sizeof(postionsForTriangle), postionsForTriangle, GL_STATIC_DRAW);
    glEnableVertexAttribArray(0);
    // Vertex Attribute 
 //   glVertexAttribPointer(
 //   /*Index*///0,
 //   /*size*/ 2,
//    GL_FLOAT,
//    GL_FALSE,
    /*Stride
      Size between two attributes(Used by poiunters to move)
      */ //sizeof(float)*2,
 //   /*Pointer*/  0
 //   );*/
    glVertexAttribPointer(0,2,GL_FLOAT,GL_FALSE,sizeof(float)*2, 0);

    /// creating shaders

    std::string vertexShader =
        "#version 330 core\n"
        "\n"
        "layout(location=0) in vec4 positon;\n"
        "\n"
        "void main()\n"
        "{\n"
        "gl_Position = position;\n"
        "}\n";
    std::string fragmentShader =  "#version 330 core\n"
        "\n"
        "layout(location=0) out vec4 color;\n"
        "\n"
        "void main()\n"
        "{\n"
        "color = vec4(1.0, 0.0, 0.0, 1.0);\n"
        "}\n";
    UsInt shader = CreateShader(vertexShader, fragmentShader);
    glUseProgram(shader);
    while (!glfwWindowShouldClose(window))
    {
        glClear(GL_COLOR_BUFFER_BIT);
        glDrawArrays(GL_TRIANGLES, 0, 3); // shader draws the shape of a triangle
        glfwSwapBuffers(window);
        glfwPollEvents();
    }
    // unbind the buffer
    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glfwTerminate();
    return 0;
}
